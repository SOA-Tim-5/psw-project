version: '3.9'

services:
  explorer:
    build:
      dockerfile: Dockerfile
      context: .
      target: final
    restart: on-failure
    networks:
      - database
    ports:
      - "44333:80"
    environment:
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
    depends_on:
      - database
  encounters:
    image: encounters
    restart: on-failure
    ports:
      - "81:81"
    environment:
      # NoSQL: environment variable holding connection URI for Mongo database
      # protocol://username:password@hostname:port
      - MONGO_DB_URI=mongodb://root:pass@mongo:27017
      # - MONGO_INITDB_ROOT_USERNAME= root
      # - MONGO_INITDB_ROOT_PASSWORD= pass
      # - MONGO_DB_URI=mongodb://mongo:27017
    # NoSQL: Our service will try to connect to Mongo before it is up
    # in order to avoid that problem, we specify that it depends on mongo service
    # which defines the order of starting the containers
    # Additionaly we specify that mongo service needs to pass a healthcheck
    depends_on:
      mongo:
        condition: service_healthy
  tours:
    image: tours
    restart: on-failure
    networks:
      - database
    ports:
      - "88:88"
    environment:
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
    depends_on:
      - explorer
      - database
  database:
    image: postgres:13
    restart: always
    networks:
      - database
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: explorer
    ports:
      - "5432:5432"
    volumes:       
      - type: volume
        source: database-data
        target: /var/lib/postgresql/data
      - type: bind
        source: init.sql
        target: /tmp/explorer-init.sql

  followers:
    image: followers
    restart: on-failure
    ports:
      - "8090:8090"
    environment:
      # NoSQL: environment variable holding connection URI for Neo4J database
      # Local DB instance
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=ivanaanja
    depends_on:
      neo4j:
        condition: service_healthy
  
# NoSQL: MongoDB
  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db

  # NoSQL: MognoExpress
  mongo-express:
    image: mongo-express
    restart: always
    environment:
      # hostname of mongo databse
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_MONGODB_URL=mongodb://root:pass@mongo:27017/
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    volumes:
      - mongo_express_data:/data/db

  # NoSQL: Neo4J DB
  neo4j:
    image: neo4j
    restart: always
    ports:
      # bolt
      - "7687:7687"
      # http
      - "7474:7474"
      # https
      - "7473:7473"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      # test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a <NEO4J_dbms_connector_bolt_listen__address> -u <user defined username> -p <user defined password> || exit 1" ]
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p ivanaanja || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/ivanaanja
    volumes:
      - neo4j_data:/data

volumes:
  database-data:
    name: explorer
  mongo_store:
  mongo_express_data:
  neo4j_data:

networks:
  database:
    name: database
    driver: local