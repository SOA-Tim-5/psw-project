version: '3.9'

services:
  explorer:
    build:
      dockerfile: Dockerfile
      context: .
      target: final
    restart: on-failure
    networks:
      - database
    ports:
      - "44333:80"
    environment:
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
    depends_on:
      - database

  stakeholders:
    image: stakeholders
    restart: on-failure
    networks:
      - databaseStakeholders
    ports:
      - "44332:80"
    environment:
      DATABASE_HOST: databaseStakeholders
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
    depends_on:
      - databaseStakeholders

  encounters:
    image: encounters
    restart: on-failure
    ports:
      - "81:81"
    environment:
      MONGO_DB_URI: mongodb://root:pass@mongo:27017
    depends_on:
      mongo:
        condition: service_healthy

  database:
    image: postgres:13
    restart: always
    networks:
      - database
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: explorer
    ports:
      - "5432:5432"
    volumes:       
      - type: volume
        source: database-data
        target: /var/lib/postgresql/data
      - type: bind
        source: init.sql
        target: /tmp/explorer-init.sql

  databaseStakeholders:
    image: postgres:13
    restart: always
    networks:
      - databaseStakeholders
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: explorer
    ports:
      - "5431:5431"

  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongo
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
      ME_CONFIG_MONGODB_URL: mongodb://root:pass@mongo:27017/
    depends_on:
      - mongo
    ports:
      - "8081:8081"

  tours:
    image: tours
    restart: on-failure
    networks:
      - database
    ports:
      - "88:88"
    environment:
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
    depends_on:
      - explorer
      - database

  followers:
    image: followers
    restart: on-failure
    ports:
      - "8090:8090"
    environment:
      NEO4J_DB: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASS: ivanaanja
    depends_on:
      neo4j:
        condition: service_healthy

  neo4j:
    image: neo4j
    restart: always
    ports:
      - "7687:7687"
      - "7474:7474"
      - "7473:7473"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p ivanaanja || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      NEO4J_AUTH: neo4j/ivanaanja
    volumes:
      - neo4j_data:/data

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yml 
    volumes:
      - ./loki-config:/etc/loki



  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
      - ./promtail-config:/etc/promtail
    command: -config.file=/etc/promtail/config.yml

#  grafana:
#    image: grafana/grafana:latest
#    ports:
#      - "3000:3000"
#    depends_on:
#      - loki
#    environment:
#      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
#      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
#      - GF_USERS_ALLOW_SIGN_UP=false
#      - GF_EXPLORE_ENABLED=true
#    volumes:
#      - grafana-data:/var/lib/grafana


#      version: "3.8"
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
     - '3000:3000'
    depends_on:
      - loki
     

volumes:
  database-data:
    name: explorer
  mongo_store:
  mongo_express_data:
  neo4j_data:
  grafana-data:

networks:
  database:
    name: database
    driver: local
  databaseStakeholders:
    name: databaseStakeholders
    driver: bridge
